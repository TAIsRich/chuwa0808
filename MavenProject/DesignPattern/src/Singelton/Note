/* Singleton：

饿汉式：demo 1 - 静态成员变量 and demo2 - 静态代码块
类加载就会导致改单实例对象被创建；如果一直不用，一直都还会存在于内存中，造成内存浪费问题。

懒汉式：第一次使用时才会创建
demo3: 线程安全
demo4: 双重检查锁（需要调整加锁时机), 是一种非常好的单例实现模式，解决了单例，性能，线程安全问题。
上面的双重检查锁模式看上去完美无缺，其实也存在问题，在多线程情况下，可能会出现空指针问题，
出现问题的原因是JVM在实例化对象的时候会进行优化和指令重排序操作。

要解决双重检查锁模式带来的空指针问题，只需要使用volatile关键字，volatile关键字可保证可见性和有序性。
这样的使用能保证在多线程情况下线程安全也不会有性能问题。

（video P27 TBC)

*/