package java8.features.stream_api;
import org.junit.Test;
import java8.features.Employee;
import java.util.Arrays;
import java.util.List;
import java.util.stream.IntStream;
import java.util.stream.LongStream;
import java.util.stream.Stream;




public class StreamApiCreationTest {


    //Stream API可以声明性地通过parallel()并行流与sequential()顺序流之间进行切换。
    @Test
    public void testCollection(){
        List<Integer> col = Arrays.asList(1,2,3,4,5);
        col.forEach(System.out::println);

        //sequential()顺序流
        Stream<Integer> stream = col.stream();
        System.out.println("Stream object: " + stream);

        //parallel()并行流

        Stream<Integer> parallelStream = col.parallelStream();
        System.out.println("Parallel Stream object: " + parallelStream);
    }

    //Arrays.stream(arr

    @Test
    public void testArrays(){
        int[] arr = new int[]{1, 2, 3, 4, 5};
        IntStream stream = Arrays.stream(arr);
        System.out.println("Stream object: " + stream);

        Employee e1 = new Employee(1001, "Tim", 21, 1234);
        Employee e2 = new Employee(1002, "Rick", 30, 4321);
        Employee[] arr1 = new Employee[]{e1, e2};
        Stream<Employee> stream1 = Arrays.stream(arr1);
        System.out.println("Stream object: " + stream1);
    }

    @Test
    public void testOf(){
        Stream<Integer> stream = Stream.of(1, 2, 3, 4, 5);
        System.out.println("Stream object: " + stream);
    }


    @Test
    public void testIterate(){
        //traverse first 10 even numbers
        //seed : 0, means t's initial value is 0, then t is updated every time.
        // limit(10) means that it only produce 10 elements then stop.
        Stream.iterate(0, t -> t + 2).limit(10).forEach(System.out::println);
    }

    //Stream generate(Supplier<T> s) returns an infinite sequential unordered stream where each element is generated by the provided Supplier.
    // This is suitable for generating constant streams, streams of random elements, etc.
    @Test
    public void testGenerate(){
        // call math.random() 10 times
        Stream.generate(Math::random).limit(10).forEach(System.out::println);

        Stream<String> streamGenerated =
                Stream.generate(() -> "element").limit(10);
        streamGenerated.forEach(System.out::println);
    }

    @Test
    public void testBuilder() {
        Stream<String> streamBuilder =
                Stream.<String>builder().add("a").add("b").add("c").build();
        System.out.println("Stream Object: " + streamBuilder);
        streamBuilder.forEach(System.out::println);
    }

    @Test
    public void testStreamOfPrimitives() {
        IntStream intStream = IntStream.range(1, 3);
        LongStream longStream = LongStream.rangeClosed(1, 3);

        System.out.println("Stream Object: " + intStream);
        intStream.forEach(System.out::println);

        System.out.println("Stream Object: " + longStream);
        longStream.forEach(System.out::println);
    }
}
